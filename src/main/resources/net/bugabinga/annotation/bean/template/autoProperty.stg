delimiters "%","%"

auto_property_instance(packageName, imports, className, isBean, params) ::= <<
%package_statement(packageName)%

%imports:import_statement(); separator="\n"%

%clazz(className, isBean, params)%>>

import_statement(name, isStatic=false) ::= "import %if(isStatic)%static%endif% %name%;"

package_statement(name) ::= "package %name%;"

clazz(name,isBean, params) ::= <<
public final class AutoProperty_%name% extends %name% {
	AutoProperty_%name%(%params:property_parameter(); wrap, anchor, separator=","% ) {
		%params:property_definition(); separator="\n"%
	}
}>>

property_parameter(property) ::= "final %property.type% %property.name%"

property_definition(property) ::= "this.%property.name% = new %property.type%(this,\"%property.name%\",%property.name%)"

property_accessor(property) ::= <<
@Override
public %property.type% %property.name%(){
	return %property.name%;
}>>

getter_sig(type, name) ::= "public %type% get%name%()"

getter_interface(type, name, commentText, commentReturn) ::= <<

/**
* %commentText%
* @return %commentReturn%
*/
%getter_sig(type,name)%;
>>

getter_impl(type, name) ::= <<
@Override
%getter_sig(type, name)% {
	return %name%.getValue();
}
>>

setter_sig(type, name) ::= "public %type% set%name%()"

setter_interface(type, name, commentText, commentParam) ::= <<
/**
* %commentText%
* @param %name% %commentParam%
*/
%setter_sig(type, name)%;
>>

setter_impl(type, name) ::= <<
@Override
%setter_sig(type, name)%(final %type% %name%) {
	Objects.requireNonNull($);
	this.%name%.setValue(%name%)
}
>>



